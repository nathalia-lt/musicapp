<template>
  <div class="page" data-name="home">
    <!-- Top Navbar -->
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner">
        <div class="left nav-wrapper">
          <a
            href="#"
            class="link icon-only panel-open avatar"
            data-panel="left"
          >
            <img src="../assets/avatar.png" alt="" />
          </a>
          <span>Home</span>
        </div>
      </div>
    </div>

    <!-- Toolbar -->
    <${Toolbar} />

    <!-- Scrollable page content-->
    <div class="page-content">
      <div class="block-title">Recenctly played</div>

      <swiper-container
        class="demo-swiper-multiple"
        space-between="10"
        slides-per-view="4"
      >
        <!-- $h reconhece o js para html (junta o hmtl com js) -->
        ${songs.map(song => $h`
        <swiper-slide class="swiper-album">${song}</swiper-slide>
        `)}
      </swiper-container>

      <div class="block-title">Made for you</div>

      <swiper-container
        class="demo-swiper-multiple"
        space-between="10"
        slides-per-view="3"
      >
        ${suggestions.map(song => $h`
        <swiper-slide class="swiper-album">${song}</swiper-slide>
        `)}
      </swiper-container>

      <!-- video player -->
      <div class="video">
        <p>Treanding Now</p>
        <video controls width="374" preload="auto" autoplay muted>
          <source src="../assets/musicapp.mp4" type="video/mp4" />
          <source src="../assets/concert.mp4" type="video/mp4" />
          <p>
            Your browser doesn't support HTML video. Here is a
            <a href="rabbit320.mp4">link to the video</a> instead.
          </p>
        </video>
        <!-- Fallback content here -->
        <div class="timer">
          <div></div>
          <span aria-label="timer">00:00</span>
        </div>
        <div class="controls">
          <div class="buttons-container">
            <button class="rwd" aria-label="rewind">
              <i class="icon f7-icons">backward_fill</i>
            </button>
            <button class="play" aria-label="play pause toggle">
              <i class="pause-icon icon f7-icons ${isPlaying ? '' : 'hidden'}"
                >pause_circle_fill</i
              >
              <i class="play-icon icon f7-icons ${isPlaying ? 'hidden' : ''}"
                >play_circle_fill</i
              >
            </button>
            <button class="fwd" aria-label="fast forward">
              <i class="icon f7-icons">forward_fill</i>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<style>
  .video {
    padding: 0 8px;
    width: 386px;
    margin: 16px 0;
    position: relative;
  }

  .swiper-album {
    height: 100px;
    border-radius: 10px;
    border: 1px solid black;
  }

  .nav-wrapper {
    padding-top: 10px !important;
    gap: 1rem;
  }

  .controls {
    visibility: hidden;
    opacity: 0.5;
    border-radius: 10px;
    position: absolute;
    bottom: 20px;
    left: 8px;
    background-color: black;
    box-shadow: 3px 3px 5px black;
    transition: 1s all;
    display: flex;
    width: 374px;
    /* right: 140px; */
  }

  .buttons-container {
    display: flex;
    gap: 2rem;
    width: 100%;
    align-items: center;
  }

  .player:hover .controls,
  .player:focus-within .controls {
    opacity: 1;
  }

  button {
    position: relative;
    /* color: #aaa; */
    text-shadow: 1px 1px 0px black;
    border-radius: 10px;
    padding: 4px 8px;
  }

  .timer {
    font-size: 10px;
    font-family: monospace;
    text-shadow: 1px 1px 0px black;
    color: white;
    flex: 5;
    position: relative;
    top: -21px;
  }

  .timer div {
    position: absolute;
    background-color: rgba(255, 255, 255, 0.649);
    left: 0;
    top: 0;
    width: 0;
    height: 21px;
    z-index: 2;
  }

  .timer span {
    position: absolute;
    z-index: 3;
    left: 19px;
  }

  .hidden {
    display: none !important;
  }

</style>

<script>
  import Toolbar from "../components/toolbar.f7";

  export default (props, { $h, $onMounted }) => {
    // {name: 'Song 1', artist: 'Artist 1', album: 'Album 1', duration: '3:00', url_song: 'https://www.youtube.com/watch?v=QxsmWxxouIM', url_cover: 'https://i.ytimg.com/vi/QxsmWxxouIM/maxresdefault.jpg''}

    const songs = ["Song 1", "Song 2", "Song 3", "Song 4", "Song 5", "Song 6"];
    const suggestions = [
      "Song 1",
      "Song 2",
      "Song 3",
      "Song 4",
      "Song 5",
      "Song 6",
    ];

    let isPlaying = true;

    // Essa funcao, significa esperar outras funcoes montarem para ser realizada.
    //o framework vai esperar os elementos estarem no no Dom para depois realizar as funcoes do onMounted, o equivalent ao useEffect no react.
    $onMounted(() => {
      const media = document.querySelector("video");
      const controls = document.querySelector(".controls");

      const play = document.querySelector(".play"); //play pause button

      const play_icon = document.querySelector(".play-icon");
      const pause_icon = document.querySelector(".pause-icon");

      const rwd = document.querySelector(".rwd");
      const fwd = document.querySelector(".fwd");

      const timerWrapper = document.querySelector(".timer");
      const timer = document.querySelector(".timer span");
      const timerBar = document.querySelector(".timer div");

      media.removeAttribute("controls");
      controls.style.visibility = "visible";

      play.addEventListener("click", playPauseMedia);

      function playPauseMedia() {
        rwd.classList.remove("active");
        fwd.classList.remove("active");
        clearInterval(intervalRwd);
        clearInterval(intervalFwd);
        if (media.paused) {
          play_icon.classList.remove("hidden");
          pause_icon.classList.add("hidden");
          media.play();
        } else {
          play_icon.classList.add("hidden");
          pause_icon.classList.remove("hidden");
          media.pause();
        }
      }

      media.addEventListener("ended", stopMedia);

      function stopMedia() {
        media.pause();
        media.currentTime = 0;
        play.setAttribute("data-icon", "P");
        rwd.classList.remove("active");
        fwd.classList.remove("active");
        clearInterval(intervalRwd);
        clearInterval(intervalFwd);
      }

      rwd.addEventListener("click", mediaBackward);
      fwd.addEventListener("click", mediaForward);

      let intervalFwd;
      let intervalRwd;

      function mediaBackward() {
        clearInterval(intervalFwd);
        fwd.classList.remove("active");

        if (rwd.classList.contains("active")) {
          rwd.classList.remove("active");
          clearInterval(intervalRwd);
          media.play();
        } else {
          rwd.classList.add("active");
          media.pause();
          intervalRwd = setInterval(windBackward, 200);
        }
      }

      function mediaForward() {
        clearInterval(intervalRwd);
        rwd.classList.remove("active");

        if (fwd.classList.contains("active")) {
          fwd.classList.remove("active");
          clearInterval(intervalFwd);
          media.play();
        } else {
          fwd.classList.add("active");
          media.pause();
          intervalFwd = setInterval(windForward, 200);
        }
      }

      function windBackward() {
        if (media.currentTime <= 3) {
          stopMedia();
        } else {
          media.currentTime -= 3;
        }
      }

      function windForward() {
        if (media.currentTime >= media.duration - 3) {
          stopMedia();
        } else {
          media.currentTime += 3;
        }
      }

      media.addEventListener("timeupdate", setTime);

      function setTime() {
        const minutes = Math.floor(media.currentTime / 60);
        const seconds = Math.floor(media.currentTime - minutes * 60);

        const minuteValue = minutes.toString().padStart(2, "0");
        const secondValue = seconds.toString().padStart(2, "0");

        const mediaTime = `${minuteValue}:${secondValue}`;
        timer.textContent = mediaTime;

        const barLength =
          timerWrapper.clientWidth * (media.currentTime / media.duration);
        timerBar.style.width = `${barLength}px`;
      }
    });

    return $render;
  };
</script>
